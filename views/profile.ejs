<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>My Profile - Hymns</title>
    <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <link rel="stylesheet" href="/css/style.css">
    
    <style>
        /* Modal Styles */
        .modal {
            display: none;
            position: fixed;
            z-index: 1002;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0,0,0,0.5);
        }

        .modal-content {
            background-color: var(--white);
            margin: 5% auto;
            padding: 0;
            border-radius: var(--border-radius);
            width: 90%;
            max-width: 500px;
            box-shadow: var(--shadow-lg);
        }

        .modal-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 1.5rem;
            border-bottom: 1px solid var(--gray-light);
        }

        .modal-header h2 {
            margin: 0;
            font-size: 1.5rem;
        }

        .close-btn {
            background: none;
            border: none;
            font-size: 1.5rem;
            cursor: pointer;
            color: var(--text-light);
        }

        .close-btn:hover {
            color: var(--text-dark);
        }

        .modal-form {
            padding: 1.5rem;
        }

        .form-actions {
            display: flex;
            gap: 1rem;
            justify-content: flex-end;
            margin-top: 2rem;
        }

        /* Profile specific mobile fixes */
        @media (max-width: 768px) {
            .profile-header {
                flex-direction: column;
                align-items: flex-start;
                gap: 1rem;
            }

            .profile-avatar {
                flex-direction: column;
                text-align: center;
                gap: 1rem;
                width: 100%;
            }

            .profile-stats {
                justify-content: space-around;
                width: 100%;
            }

            .profile-content {
                grid-template-columns: 1fr;
                gap: 1rem;
            }

            .profile-sidebar {
                order: 2;
            }

            .profile-main {
                order: 1;
            }

            .profile-nav {
                flex-direction: row;
                overflow-x: auto;
                padding-bottom: 0.5rem;
            }

            .profile-nav .nav-item {
                white-space: nowrap;
                flex-shrink: 0;
                margin-bottom: 0;
                margin-right: 0.5rem;
            }

            .modal-content {
                margin: 10% auto;
                width: 95%;
            }

            .form-actions {
                flex-direction: column;
            }

            .form-actions .btn {
                width: 100%;
            }
        }

        /* Additional mobile fixes for very small screens */
        @media (max-width: 480px) {
            .profile-stats {
                flex-direction: column;
                gap: 1rem;
            }

            .hymn-card.compact .hymn-actions {
                flex-direction: column;
                gap: 0.5rem;
            }

            .hymn-card.compact .btn {
                width: 100%;
            }
        }

        /* Flash message styles */
        .alert {
            padding: 1rem;
            border-radius: var(--border-radius);
            margin-bottom: 1.5rem;
            display: flex;
            align-items: flex-start;
            gap: 1rem;
        }

        .alert-success {
            background: rgba(39, 174, 96, 0.1);
            border-left: 4px solid var(--success);
            color: var(--success);
        }

        .alert-error {
            background: rgba(231, 76, 60, 0.1);
            border-left: 4px solid var(--error);
            color: var(--error);
        }

        .alert i {
            font-size: 1.2rem;
            margin-top: 0.1rem;
        }

        .alert div p {
            margin: 0.2rem 0;
        }
    </style>
</head>
<body>
    <%- include('partials/header') %>

    <div class="profile-container">
        <div class="container">
            <!-- Flash Messages -->
            <% if (success_msg && success_msg.length > 0) { %>
                <div class="alert alert-success">
                    <i class="fas fa-check-circle"></i>
                    <div>
                        <p><%= success_msg %></p>
                    </div>
                </div>
            <% } %>

            <% if (error_msg && error_msg.length > 0) { %>
                <div class="alert alert-error">
                    <i class="fas fa-exclamation-circle"></i>
                    <div>
                        <p><%= error_msg %></p>
                    </div>
                </div>
            <% } %>

            <div class="profile-header">
                <div class="profile-avatar">
                    <div class="avatar-placeholder">
                        <i class="fas fa-user"></i>
                    </div>
                    <div class="profile-info">
                        <h1 id="username-display"><%= user.username %></h1>
                        <p>Member since <%= new Date(user.createdAt).toLocaleDateString() %></p>
                        <div class="profile-stats">
                            <div class="stat">
                                <span class="stat-number"><%= user.favorites ? user.favorites.length : 0 %></span>
                                <span class="stat-label">Favorites</span>
                            </div>
                            <div class="stat">
                                <span class="stat-number"><%= user.isSubscribed ? 'Yes' : 'No' %></span>
                                <span class="stat-label">Newsletter</span>
                            </div>
                            <div class="stat">
                                <span class="stat-number"><%= user.isAdmin ? 'Admin' : 'User' %></span>
                                <span class="stat-label">Role</span>
                            </div>
                        </div>
                    </div>
                </div>
                <button class="btn btn-outline" id="edit-profile-btn">
                    <i class="fas fa-edit"></i> Edit Profile
                </button>
            </div>
            
            <!-- Edit Profile Modal -->
            <div id="edit-profile-modal" class="modal">
                <div class="modal-content">
                    <div class="modal-header">
                        <h2>Edit Profile</h2>
                        <button class="close-btn" id="close-modal">&times;</button>
                    </div>
                    <form id="edit-profile-form" class="modal-form">
                        <div class="form-group">
                            <label class="form-label">Username *</label>
                            <input type="text" id="edit-username" name="username" class="form-control" 
                                   value="<%= user.username %>" required minlength="3" maxlength="30">
                            <small class="form-help">Choose a unique username (3-30 characters)</small>
                        </div>
                        
                        <div class="form-group">
                            <label class="form-label">Email Address *</label>
                            <input type="email" id="edit-email" name="email" class="form-control" 
                                   value="<%= user.email %>" required>
                        </div>
                        
                        <div class="form-actions">
                            <button type="button" class="btn btn-secondary" id="cancel-edit">Cancel</button>
                            <button type="submit" class="btn btn-primary">Save Changes</button>
                        </div>
                    </form>
                </div>
            </div>
            
            <div class="profile-content">
                <div class="profile-sidebar">
                    <nav class="profile-nav">
                        <a href="#favorites" class="nav-item active" data-tab="favorites">
                            <i class="fas fa-heart"></i>
                            Favorite Hymns
                        </a>
                        <a href="#settings" class="nav-item" data-tab="settings">
                            <i class="fas fa-cog"></i>
                            Account Settings
                        </a>
                        <a href="#password" class="nav-item" data-tab="password">
                            <i class="fas fa-lock"></i>
                            Change Password
                        </a>
                        <a href="#notifications" class="nav-item" data-tab="notifications">
                            <i class="fas fa-bell"></i>
                            Notifications
                        </a>
                    </nav>
                </div>
                
                <div class="profile-main">
                    <!-- Favorites Tab -->
                    <div class="tab-content active" id="favorites-tab">
                        <div class="tab-header">
                            <h2>My Favorite Hymns</h2>
                            <div class="content-actions">
                                <span class="stat-label"><%= user.favorites ? user.favorites.length : 0 %> hymns</span>
                            </div>
                        </div>
                        
                        <% if (user.favorites && user.favorites.length > 0) { %>
                            <div class="hymns-grid compact">
                                <% user.favorites.forEach(function(hymn) { %>
                                    <div class="hymn-card compact">
                                        <div class="hymn-image">
                                            <div class="language-badge">
                                                <%= hymn.hymnLanguage ? hymn.hymnLanguage.charAt(0).toUpperCase() + hymn.hymnLanguage.slice(1) : 'Unknown' %>
                                            </div>
                                            <i class="fas fa-music"></i>
                                        </div>
                                        <div class="hymn-content">
                                            <h3><a href="/hymns/<%= hymn._id %>"><%= hymn.title %></a></h3>
                                            <p class="hymn-description"><%= hymn.description ? hymn.description.substring(0, 80) + (hymn.description.length > 80 ? '...' : '') : 'No description available' %></p>
                                            <div class="hymn-meta">
                                                <span><i class="fas fa-play"></i> <%= hymn.plays || 0 %></span>
                                                <span><i class="fas fa-star"></i> <%= hymn.rating ? hymn.rating.toFixed(1) : '0.0' %></span>
                                                <span><i class="fas fa-download"></i> <%= hymn.downloads || 0 %></span>
                                            </div>
                                            <div class="hymn-actions">
                                                <a href="/hymns/<%= hymn._id %>" class="btn btn-primary btn-small">Listen</a>
                                                <button class="btn-icon favorite-btn active" data-hymn-id="<%= hymn._id %>" title="Remove from favorites">
                                                    <i class="fas fa-heart"></i>
                                                </button>
                                            </div>
                                        </div>
                                    </div>
                                <% }); %>
                            </div>
                        <% } else { %>
                            <div class="empty-state">
                                <i class="fas fa-heart" style="font-size: 4rem; color: var(--gray); margin-bottom: 1rem;"></i>
                                <h3>No favorite hymns yet</h3>
                                <p>Start exploring hymns and add them to your favorites!</p>
                                <div class="empty-state-actions">
                                    <a href="/" class="btn btn-primary">Browse Hymns</a>
                                    <a href="/search" class="btn btn-outline">Search Hymns</a>
                                </div>
                            </div>
                        <% } %>
                    </div>
                    
                    <!-- Settings Tab -->
                    <div class="tab-content" id="settings-tab">
                        <div class="tab-header">
                            <h2>Account Settings</h2>
                        </div>
                        
                        <form id="settings-form" class="settings-form">
                            <div class="form-section">
                                <h3>Profile Information</h3>
                                <div class="form-group">
                                    <label class="form-label">Username</label>
                                    <input type="text" class="form-control" value="<%= user.username %>" disabled>
                                    <small class="form-help">Use the Edit Profile button above to change username</small>
                                </div>
                                
                                <div class="form-group">
                                    <label class="form-label">Email Address</label>
                                    <input type="email" class="form-control" value="<%= user.email %>" disabled>
                                </div>

                                <div class="form-group">
                                    <label class="form-label">Account Type</label>
                                    <input type="text" class="form-control" value="<%= user.isAdmin ? 'Administrator' : 'Standard User' %>" disabled>
                                </div>
                            </div>
                            
                            <div class="form-section">
                                <h3>Language Preferences</h3>
                                <div class="form-group">
                                    <label class="form-label">Preferred Language</label>
                                    <select class="form-control" name="languagePreference">
                                        <option value="english" <%= user.languagePreference === 'english' ? 'selected' : '' %>>English</option>
                                        <option value="amharic" <%= user.languagePreference === 'amharic' ? 'selected' : '' %>>Amharic</option>
                                        <option value="oromo" <%= user.languagePreference === 'oromo' ? 'selected' : '' %>>Afan Oromo</option>
                                        <option value="tigrigna" <%= user.languagePreference === 'tigrigna' ? 'selected' : '' %>>Tigrigna</option>
                                    </select>
                                    <small class="form-help">This will be your default language for hymn recommendations</small>
                                </div>
                            </div>
                            
                            <button type="submit" class="btn btn-primary">Save Changes</button>
                        </form>
                    </div>
                    
                    <!-- Password Tab -->
                    <div class="tab-content" id="password-tab">
                        <div class="tab-header">
                            <h2>Change Password</h2>
                        </div>
                        
                        <form id="password-form" class="settings-form">
                            <div class="form-section">
                                <div class="form-group">
                                    <label class="form-label">Current Password</label>
                                    <input type="password" name="currentPassword" class="form-control" required>
                                </div>
                                
                                <div class="form-group">
                                    <label class="form-label">New Password</label>
                                    <input type="password" name="newPassword" class="form-control" required minlength="6">
                                    <small class="form-help">Minimum 6 characters</small>
                                </div>
                                
                                <div class="form-group">
                                    <label class="form-label">Confirm New Password</label>
                                    <input type="password" name="confirmPassword" class="form-control" required>
                                </div>
                            </div>
                            
                            <button type="submit" class="btn btn-primary">Change Password</button>
                        </form>
                    </div>
                    
                    <!-- Notifications Tab -->
                    <div class="tab-content" id="notifications-tab">
                        <div class="tab-header">
                            <h2>Notification Settings</h2>
                        </div>
                        
                        <form id="notifications-form" class="settings-form">
                            <div class="form-section">
                                <h3>Email Notifications</h3>
                                
                                <div class="checkbox-group">
                                    <label class="checkbox-label large">
                                        <input type="checkbox" name="newsletter" <%= user.isSubscribed ? 'checked' : '' %>>
                                        <span class="checkmark"></span>
                                        <div>
                                            <strong>Newsletter Subscription</strong>
                                            <p>Receive updates about new hymns, features, and community news</p>
                                        </div>
                                    </label>
                                </div>

                                <div class="checkbox-group">
                                    <label class="checkbox-label large">
                                        <input type="checkbox" name="newHymns" <%= user.notifications && user.notifications.newHymns ? 'checked' : 'checked' %>>
                                        <span class="checkmark"></span>
                                        <div>
                                            <strong>New Hymn Notifications</strong>
                                            <p>Get notified when new hymns are added to the platform</p>
                                        </div>
                                    </label>
                                </div>
                            </div>
                            
                            <button type="submit" class="btn btn-primary">Save Preferences</button>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <footer class="footer">
        <div class="container">
            <div class="footer-content">
                <div class="footer-section">
                    <div class="footer-logo">
                        <img src="/assets/logo.png" alt="Hymns Logo">
                        <span>Hymns</span>
                    </div>
                    <p>Sharing the beauty of Ethiopian Orthodox hymns with the world.</p>
                </div>
            </div>
            <div class="footer-bottom">
                <p>&copy; 2025 Hymns Project. All rights reserved.</p>
            </div>
        </div>
    </footer>

    <script src="/js/main.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Tab functionality
            const tabItems = document.querySelectorAll('.profile-nav .nav-item');
            const tabContents = document.querySelectorAll('.tab-content');
            
            tabItems.forEach(item => {
                item.addEventListener('click', function(e) {
                    e.preventDefault();
                    const tabName = this.getAttribute('data-tab');
                    
                    // Remove active class from all tabs
                    tabItems.forEach(tab => tab.classList.remove('active'));
                    tabContents.forEach(content => content.classList.remove('active'));
                    
                    // Add active class to current tab
                    this.classList.add('active');
                    document.getElementById(tabName + '-tab').classList.add('active');
                });
            });

            // Edit Profile Modal
            const editProfileBtn = document.getElementById('edit-profile-btn');
            const editProfileModal = document.getElementById('edit-profile-modal');
            const closeModalBtn = document.getElementById('close-modal');
            const cancelEditBtn = document.getElementById('cancel-edit');
            const editProfileForm = document.getElementById('edit-profile-form');

            // Open modal
            editProfileBtn.addEventListener('click', function() {
                editProfileModal.style.display = 'block';
            });

            // Close modal
            function closeModal() {
                editProfileModal.style.display = 'none';
            }

            closeModalBtn.addEventListener('click', closeModal);
            cancelEditBtn.addEventListener('click', closeModal);

            // Close modal when clicking outside
            window.addEventListener('click', function(event) {
                if (event.target === editProfileModal) {
                    closeModal();
                }
            });

            // Handle edit profile form submission
            editProfileForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                
                const formData = new FormData(this);
                const data = {
                    username: formData.get('username'),
                    email: formData.get('email')
                };

                try {
                    const response = await fetch('/users/update-profile', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify(data)
                    });

                    const result = await response.json();

                    if (response.ok) {
                        // Update displayed username
                        document.getElementById('username-display').textContent = data.username;
                        showNotification('Profile updated successfully!', 'success');
                        closeModal();
                    } else {
                        showNotification('Error: ' + result.error, 'error');
                    }
                } catch (error) {
                    console.error('Error updating profile:', error);
                    showNotification('Error updating profile. Please try again.', 'error');
                }
            });

            // Handle favorite buttons
            document.querySelectorAll('.favorite-btn').forEach(button => {
                button.addEventListener('click', async function() {
                    const hymnId = this.getAttribute('data-hymn-id');
                    const isActive = this.classList.contains('active');
                    
                    try {
                        const response = await fetch(`/users/favorites/${hymnId}`, {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                            }
                        });

                        const result = await response.json();

                        if (response.ok) {
                            if (result.action === 'removed') {
                                this.classList.remove('active');
                                showNotification('Removed from favorites', 'info');
                                // Remove the card from the DOM
                                this.closest('.hymn-card').remove();
                                
                                // Update favorites count
                                const favoritesCount = document.querySelector('.profile-stats .stat:first-child .stat-number');
                                if (favoritesCount) {
                                    const currentCount = parseInt(favoritesCount.textContent);
                                    favoritesCount.textContent = currentCount - 1;
                                }
                                
                                // Update tab header count
                                const tabCount = document.querySelector('#favorites-tab .stat-label');
                                if (tabCount) {
                                    const currentTabCount = parseInt(tabCount.textContent);
                                    tabCount.textContent = (currentTabCount - 1) + ' hymns';
                                }
                                
                                // Show empty state if no favorites left
                                const hymnsGrid = document.querySelector('.hymns-grid');
                                if (hymnsGrid && hymnsGrid.children.length === 0) {
                                    hymnsGrid.innerHTML = `
                                        <div class="empty-state">
                                            <i class="fas fa-heart" style="font-size: 4rem; color: var(--gray); margin-bottom: 1rem;"></i>
                                            <h3>No favorite hymns yet</h3>
                                            <p>Start exploring hymns and add them to your favorites!</p>
                                            <div class="empty-state-actions">
                                                <a href="/" class="btn btn-primary">Browse Hymns</a>
                                                <a href="/search" class="btn btn-outline">Search Hymns</a>
                                            </div>
                                        </div>
                                    `;
                                }
                            }
                        } else {
                            showNotification(result.error || 'Error updating favorites', 'error');
                        }
                    } catch (error) {
                        console.error('Error toggling favorite:', error);
                        showNotification('Error updating favorites', 'error');
                    }
                });
            });

            // Handle settings form submission
            document.getElementById('settings-form')?.addEventListener('submit', async function(e) {
                e.preventDefault();
                const formData = new FormData(this);
                const data = Object.fromEntries(formData);

                try {
                    const response = await fetch('/users/update-settings', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify(data)
                    });

                    if (response.ok) {
                        showNotification('Settings updated successfully!', 'success');
                    } else {
                        showNotification('Error updating settings', 'error');
                    }
                } catch (error) {
                    console.error('Error updating settings:', error);
                    showNotification('Error updating settings. Please try again.', 'error');
                }
            });

            // Handle password form submission
            document.getElementById('password-form')?.addEventListener('submit', async function(e) {
                e.preventDefault();
                const formData = new FormData(this);
                const data = Object.fromEntries(formData);

                if (data.newPassword !== data.confirmPassword) {
                    showNotification('New passwords do not match!', 'error');
                    return;
                }

                try {
                    const response = await fetch('/users/change-password', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify(data)
                    });

                    const result = await response.json();

                    if (response.ok) {
                        showNotification('Password changed successfully!', 'success');
                        this.reset();
                    } else {
                        showNotification('Error: ' + result.error, 'error');
                    }
                } catch (error) {
                    console.error('Error changing password:', error);
                    showNotification('Error changing password. Please try again.', 'error');
                }
            });

            // Handle notifications form submission
            document.getElementById('notifications-form')?.addEventListener('submit', async function(e) {
                e.preventDefault();
                const formData = new FormData(this);
                const data = Object.fromEntries(formData);

                try {
                    const response = await fetch('/users/update-notifications', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify(data)
                    });

                    if (response.ok) {
                        showNotification('Notification preferences updated!', 'success');
                    } else {
                        showNotification('Error updating preferences', 'error');
                    }
                } catch (error) {
                    console.error('Error updating notifications:', error);
                    showNotification('Error updating notification preferences. Please try again.', 'error');
                }
            });

            // Notification function
            function showNotification(message, type = 'info') {
                // Use the notification system from main.js if available
                if (typeof window.showNotification === 'function') {
                    window.showNotification(message, type);
                } else {
                    // Fallback notification
                    alert(message);
                }
            }
        });
    </script>
</body>
</html>